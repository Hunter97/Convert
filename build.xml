<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="SetupConverter Project" default="all" basedir=".">

    <property name="src.dir" value="src${file.separator}main${file.separator}java" description="project source code"/>
    <property name="src-test.dir" value="src${file.separator}test${file.separator}java" description="project test code"/>
    <property name="lib.dir" value="lib" description="project libraries are found here"/>
	<property name="images.dir" value="images" description="project image files are found here"/>
	<property name="config.dir" value="config" description="project configuration property files"/>
    <property name="build.dir" value="build"
              description="anything this build script generates goes under this directory"/>
    <property name="classes.dir" value="${build.dir}${file.separator}classes"
              description="Java class files compiled by this build script  go here"/>
	<property name="log.dir" value="log" description="all log4j logging files are here"/>
    <property name="report.dir" value="${build.dir}${file.separator}report"
			  description="this directory is for all reports - xml and html"/>
    <property name="report.junit.dir" value="${report.dir}${file.separator}junit"
              description="this directory is used by JUnit. Test results are placed here in a nice HTML format"/>


    <!-- this sets up the classpath for the project. Whenever you a .jar to the lib directory it will automatically be
        be added to the classpath
    -->
    <path id="project.classpath" description="the project's class path all third party libs are on it. ">
        <pathelement path="${classes.dir}"/>
		<pathelement path="${config.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <!-- targets follow - each target does one thing in the compile, run, test and build process -->

    <target name="clean" description="deletes all build artifacts (anything created by this build file)">
        <delete dir="${classes.dir}"/>
        <delete dir="${report.dir}"/>
        <delete dir="${build.dir}"/>
		<delete dir="${log.dir}"/>
        <delete file="setupconverter.jar"/>
        <delete file="setupconverter-all.zip"/>
    </target>

    <target name="init" description="Build initialization - create output directories" depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${report.dir}"/>
    </target>

    <target name="compile" description="Compile all the code; produce classes" depends="init">
        <javac destdir="${classes.dir}" includeantruntime="false" debug="true" fork="true" >
			<compilerarg value="-Xlint:unchecked"/>
            <src path="${src.dir}"/>
            <src path="${src-test.dir}"/>
            <classpath refid="project.classpath"/>
        </javac>
    </target>
	
	    <!-- Creates a jar file -->
    <target name="jar" depends="compile" description="generates the jar file" >
        <mkdir dir="META-INF"/>
        <manifest file="${basedir}/META-INF/MANIFEST.MF" mode="replace">
            <attribute name="Main-Class" value="com.setupconverter.ui.ConvertUI"/>
        </manifest>
        <jar manifest="${basedir}/META-INF/MANIFEST.MF" destfile="setupconverter.jar" basedir="${classes.dir}" excludes="">
            <fileset dir="${basedir}">
                <include name="META-INF/MANIFEST.MF"/>
                <include name="README.md"/>
                <exclude name="build/instrumented/**"/>
                <exclude name="build/report/**"/>
            </fileset>
        </jar>
    </target>

    <!-- Creates a distribution zip file -->
    <target name="dist" depends="jar"  description="generates the distribution zip file" >
        <zip destfile="setupconverter-all.zip" basedir="."
             excludes=".idea/,build/**,data/**,lib/**,resources/**,META-INF/**,src/**,build.xml,cobertura.ser,**/*.pdf">

            <zipfileset dir="${lib.dir}" prefix="lib">
            </zipfileset>
        </zip>
    </target>

    <target name="run" depends="jar">
        <java jar="setupconverter.jar" fork="true" classpath="project.classpath">
            <!-- to pass multiple jvm arguments, create one jvmarg per argument -->
            <jvmarg value=""/>
            <!-- to pass multiple application arguments, create one arg per argument -->
            <arg value=""/>
        </java>
    </target>

    <target name="javadoc" depends="init" description="Generate source JavaDoc">
        <delete dir="${doc.api.dir}"/>
        <mkdir dir="${doc.api.dir}"/>
        <javadoc packagenames="com.setupconverter.*"
                 classpathref="project.classpath"
                 sourcepath="src/main/java"
                 excludepackagenames=""
                 defaultexcludes="yes"
                 destdir="doc/api"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Setup Converter API">
            <doctitle><![CDATA[<h1>SetupConverter</h1>]]></doctitle>
            <bottom><![CDATA[Final Project - Setup Converter - Paul Wallace]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
            <group title="Setup Converter Common Classes" packages="com.setconverter*"/>
            <group title="Setup Converter User Interface Classes" packages="com.setupconverter.ui*"/>
            <group title="Setup Converter Logic Classes" packages="com.setupconverter.logic*"/>
            <link offline="true" href="http://docs.oracle.com/javase/7/docs/api/" packagelistLoc="/temp:/tmp"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
        </javadoc>
    </target>

    <target name="test" description="Runs all the JUnit tests and generates the test results report" depends="compile">

        <junit printsummary="yes" haltonfailure="false" showoutput="true" failureproperty="test_failure">
            <classpath refid="project.classpath"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${src-test.dir}">
                    <include name="**/*Test*.java"/>
                </fileset>

            </batchtest>
        </junit>

        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>

        <!-- if a test fails then the property  "test_failure" will be set and we fail now.
         Failng now, rather than when the test actually failed allows all the tests to complete and the report
         to be generated. 
         -->
        <fail if="test_failure" message="At least one JUnit test failed. Please see report."/>


    </target>


    <!-- this is the default target - it does everything -->
    <target name="all" depends="init, clean, compile, test"
            description="deletes previous work, compiles new class, runs hello program"/>

</project>